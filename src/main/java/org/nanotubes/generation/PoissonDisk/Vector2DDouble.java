package org.nanotubes.generation.PoissonDisk;

/**
 * Класс описывающий положение точки в двумерном пространстве с помощью действительных чисел
 */
public class Vector2DDouble {
    /**
     * Координата двумерного пространства совподающая с осью абцисс декартовой системы координат
     */
    private double x;
    /**
     * Координата двумерного пространства совподающая с осью ординат декартовой системы координат
     */
    private double y;

    /**
     * Конструктор класса создающий частицу в начале координат двумерного пространства
     */
    public Vector2DDouble() {
        this.x = 0;
        this.y = 0;
    }

    /**
     * Конструктор класса создающий частицу в заданной точке двумерного пространства
     * @param x координата двумерного пространства совподающая с осью абцисс декартовой системы координат
     * @param y координата двумерного пространства совподающая с осью ординат декартовой системы координат
     */
    public Vector2DDouble(double x, double y) {
        this.x = x;
        this.y = y;
    }

    /**
     * Метод возвращающий расстояние между двумя точками в двумерном пространстве
     * @param x1 координата первой точки двумерного пространства совподающая с осью абцисс декартовой системы координат
     * @param y1 координата первой точки двумерного пространства совподающая с осью ординат декартовой системы координат
     * @param x2 координата второй точки двумерного пространства совподающая с осью абцисс декартовой системы координат
     * @param y2 координата второй точки двумерного пространства совподающая с осью ординат декартовой системы координат
     * @return расстояние между двумя точками
     */
    private static double distance(double x1, double y1, double x2, double y2) {
        x2 -= x1;
        y2 -= y1;
        return Math.sqrt(x2 * x2 + y2 * y2);
    }

    /**
     * Метод возвращающий расстояние от данной точки к заданной точке в двумерном пространстве
     * @param p данная точка
     * @return растояние межд двумя точками
     */
    private double distance(Vector2DDouble p) {
        return distance(getX(), getY(), p.getX(), p.getY());
    }

    /**
     * Метод возвращающий расстояние между двумя точками в дыумерном пространстве
     * @param vector0 первая точка
     * @param vector1 вторая точка
     * @return расстояние между точками
     */
    public static double distance(Vector2DDouble vector0, Vector2DDouble vector1) {
        return new Vector2DDouble(vector0.getX(), vector0.getY()).distance(vector1);
    }

    /**
     * Метод возвращающий действительное значение координаты двумерного пространства совподающей с осью абцисс декартовой системы координат
     * @return координату двумерного пространства совподающую с осью абцисс декартовой системы координат
     */
    public double getX() {
        return x;
    }

    /**
     * Метод изменяющий действительное значение координаты двумерного пространства совподающей с осью абцисс декартовой системы координат
     * @param x координата двумерного пространства совподающая с осью абцисс декартовой системы координат
     */
    public void setX(double x) {
        this.x = x;
    }

    /**
     * Метод возвращающий действительное значение координаты двумерного пространства совподающей с осью ординат декартовой системы координат
     * @return координату двумерного пространства совподающую с осью оридинат декартовой системы координат
     */
    public double getY() {
        return y;
    }

    /**
     * Метод изменяющий действительное значение координаты двумерного пространства совподающей с осью ординат декартовой системы координат
     * @param y координата двумерного пространства совподающая с осью ординат декартовой системы координат
     */
    public void setY(double y) {
        this.y = y;
    }
}
